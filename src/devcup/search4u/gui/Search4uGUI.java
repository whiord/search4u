
/*
 * Search4uGUI.java
 *
 * Created on Dec 2, 2013, 4:11:44 PM
 */
/**
 *
 * @author whiord
 */
package devcup.search4u.gui;

import com.ontos.core.miner.util.ObjectPair;
import devcup.search4u.backend.IndexCallback;
import devcup.search4u.backend.Indexer;
import devcup.search4u.backend.SearchCallback;
import devcup.search4u.backend.SearchResult;
import devcup.search4u.backend.Searcher;
import devcup.search4u.common.LogLevel;
import java.awt.EventQueue;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.ExecutionException;
import javax.swing.JFileChooser;
import javax.swing.SwingWorker;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.BadLocationException;
import javax.swing.text.html.HTMLDocument;

public class Search4uGUI extends javax.swing.JFrame implements IndexCallback, SearchCallback{
    
    /** Creates new form NewApplication */
    public Search4uGUI() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        previewFrame = new javax.swing.JFrame();
        closePreviewButton = new javax.swing.JButton();
        exportXLSXButton = new javax.swing.JButton();
        openDestinationButton = new javax.swing.JButton();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        resultList = new javax.swing.JList();
        jPanel4 = new javax.swing.JPanel();
        docPathField = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        previewPane = new javax.swing.JTextPane();
        journalFrame = new javax.swing.JFrame();
        closeJournalButton = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        journalPane = new javax.swing.JTextPane();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        docDirectoryField = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        indexProgressBar = new javax.swing.JProgressBar();
        jPanel2 = new javax.swing.JPanel();
        clearQueriesButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        queriesPane = new javax.swing.JTextPane();
        loadQueriesButton = new javax.swing.JButton();
        saveQueriesButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        searchButton = new javax.swing.JButton();
        showResultsButton = new javax.swing.JButton();
        openJournalButton = new javax.swing.JButton();
        searchProgressBar = new javax.swing.JProgressBar();
        searchSummaryLabel = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        exitMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        previewFrame.setTitle("Предпросмотр");
        previewFrame.setName("previewFrame"); // NOI18N
        previewFrame.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                previewFrameComponentShown(evt);
            }
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                previewFrameComponentHidden(evt);
            }
        });

        closePreviewButton.setLabel("Закрыть");
        closePreviewButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closePreviewButtonMouseClicked(evt);
            }
        });

        exportXLSXButton.setLabel("Экспорт в XLSX");

        openDestinationButton.setLabel("Открыть расположение");

        jSplitPane1.setDividerLocation(200);
        jSplitPane1.setDividerSize(8);
        jSplitPane1.setLastDividerLocation(200);

        resultList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "1", "2", "3", "4", "5", "6", "7", "8", "9" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        resultList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        resultList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                resultListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(resultList);

        jSplitPane1.setLeftComponent(jScrollPane2);

        docPathField.setEditable(false);

        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane3.setToolTipText("");
        jScrollPane3.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        previewPane.setEditable(false);
        jScrollPane3.setViewportView(previewPane);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(docPathField)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 504, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(docPathField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 625, Short.MAX_VALUE))
        );

        jSplitPane1.setRightComponent(jPanel4);

        javax.swing.GroupLayout previewFrameLayout = new javax.swing.GroupLayout(previewFrame.getContentPane());
        previewFrame.getContentPane().setLayout(previewFrameLayout);
        previewFrameLayout.setHorizontalGroup(
            previewFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(previewFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(previewFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 712, Short.MAX_VALUE)
                    .addGroup(previewFrameLayout.createSequentialGroup()
                        .addComponent(closePreviewButton, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exportXLSXButton, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(openDestinationButton, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        previewFrameLayout.setVerticalGroup(
            previewFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, previewFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(previewFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(closePreviewButton)
                    .addComponent(exportXLSXButton)
                    .addComponent(openDestinationButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane1)
                .addContainerGap())
        );

        closeJournalButton.setLabel("Закрыть");
        closeJournalButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closeJournalButtonMouseClicked(evt);
            }
        });

        jScrollPane4.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        journalPane.setContentType("text/html"); // NOI18N
        journalPane.setText("<html>\n<head>\n\n<style type=\"text/css\">\n.info{\ncolor:#0036B5;\n}\n.debug{\ncolor:#00701E;\n}\n.error{\ncolor:#AD022A;\n}\n</head>\n</style>\n<body id=\"body\"></body>\n<html>\n");
        jScrollPane4.setViewportView(journalPane);

        javax.swing.GroupLayout journalFrameLayout = new javax.swing.GroupLayout(journalFrame.getContentPane());
        journalFrame.getContentPane().setLayout(journalFrameLayout);
        journalFrameLayout.setHorizontalGroup(
            journalFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, journalFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(journalFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane4)
                    .addComponent(closeJournalButton, javax.swing.GroupLayout.DEFAULT_SIZE, 678, Short.MAX_VALUE))
                .addContainerGap())
        );
        journalFrameLayout.setVerticalGroup(
            journalFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, journalFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 408, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(closeJournalButton)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("search4u");
        setName("search4u"); // NOI18N
        setResizable(false);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("search4u");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Предобработка документов"));

        docDirectoryField.setToolTipText("Путь к документам");

        jButton1.setText("Выбрать...");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        jButton2.setText("Обработать");
        jButton2.setEnabled(false);
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });

        indexProgressBar.setStringPainted(true);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(indexProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(docDirectoryField, javax.swing.GroupLayout.PREFERRED_SIZE, 369, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(docDirectoryField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton2)
                    .addComponent(indexProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Составление запросов"));

        clearQueriesButton.setText("Очистить");
        clearQueriesButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clearQueriesButtonMouseClicked(evt);
            }
        });

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setViewportView(queriesPane);

        loadQueriesButton.setText("Загрузить...");
        loadQueriesButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                loadQueriesButtonMouseClicked(evt);
            }
        });

        saveQueriesButton.setText("Сохранить...");
        saveQueriesButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saveQueriesButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(clearQueriesButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(loadQueriesButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(saveQueriesButton, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addComponent(clearQueriesButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(loadQueriesButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveQueriesButton))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Поиск по документам"));

        searchButton.setLabel("Найти");
        searchButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchButtonMouseClicked(evt);
            }
        });

        showResultsButton.setText("Результаты");
        showResultsButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                showResultsButtonMouseClicked(evt);
            }
        });

        openJournalButton.setText("Журнал");
        openJournalButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                openJournalButtonMouseClicked(evt);
            }
        });

        searchProgressBar.setStringPainted(true);

        searchSummaryLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(searchButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(showResultsButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(searchProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 207, Short.MAX_VALUE)
                    .addComponent(openJournalButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchSummaryLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(searchButton)
                            .addComponent(searchProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(showResultsButton)
                            .addComponent(openJournalButton))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(searchSummaryLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        fileMenu.setMnemonic('f');
        fileMenu.setText("Файл");

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Выход");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Помощь");

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
}//GEN-LAST:event_exitMenuItemActionPerformed

private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
    JFileChooser chooser = new JFileChooser();
    File bufDir = new File(docDirectoryField.getText());
    if (bufDir.exists())
            chooser.setCurrentDirectory(bufDir.getParentFile());
    else
            chooser.setCurrentDirectory(null);
    chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
    int retval = chooser.showOpenDialog(this);
    if (retval == JFileChooser.APPROVE_OPTION){
            File f = chooser.getSelectedFile();
            docDirectoryField.setText(f.getAbsolutePath());
            logWork(LogLevel.INFO, "Selected directory: " + f.getAbsolutePath());
    }
}//GEN-LAST:event_jButton1MouseClicked

private void clearQueriesButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearQueriesButtonMouseClicked
    queriesPane.setText(null);
    logWork(LogLevel.INFO, "Queries pane cleared");
}//GEN-LAST:event_clearQueriesButtonMouseClicked

private void loadQueriesButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loadQueriesButtonMouseClicked
    JFileChooser chooser = new JFileChooser();
    File bufDir = new File(docDirectoryField.getText());
    if (bufDir.exists())
        chooser.setCurrentDirectory(bufDir.getParentFile());
    else
        chooser.setCurrentDirectory(null);
    chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
    chooser.setAcceptAllFileFilterUsed(false);
    FileNameExtensionFilter filter = new FileNameExtensionFilter("TXT files", "txt");
    chooser.setFileFilter(filter);
    
    
    int retval = chooser.showOpenDialog(this);
    if (retval == JFileChooser.APPROVE_OPTION){
        File f = chooser.getSelectedFile();
        try {
            BufferedReader reader = new BufferedReader(new FileReader(f));
            clearQueriesButtonMouseClicked(null);
            String query = "";
            while (reader.ready()){
                query += reader.readLine();
                query += "\n";
            }
            queriesPane.setText(query);   
            logWork(LogLevel.INFO, "Queries was read from file: " + f.getAbsolutePath());
        }
        catch (FileNotFoundException ex){
            logWork(LogLevel.ERROR, "File with queries not found");
        }
        catch (IOException ex){
            logWork(LogLevel.ERROR, "File reading error");
        }
    }
}//GEN-LAST:event_loadQueriesButtonMouseClicked

private void saveQueriesButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveQueriesButtonMouseClicked
    JFileChooser chooser = new JFileChooser();
    File bufDir = new File(docDirectoryField.getText());
    if (bufDir.exists())
        chooser.setCurrentDirectory(bufDir.getParentFile());
    else
        chooser.setCurrentDirectory(null);
    chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
    FileNameExtensionFilter filter = new FileNameExtensionFilter("TXT files", "txt");
    chooser.setFileFilter(filter);
    chooser.setAcceptAllFileFilterUsed(false);
    
    int retval = chooser.showSaveDialog(this);
    if (retval == JFileChooser.APPROVE_OPTION){
        File f = chooser.getSelectedFile();
        if (!f.getAbsolutePath().endsWith(".txt")){
            f = new File(f.getAbsolutePath() + ".txt");
        }
        try {
            BufferedWriter writer = new BufferedWriter(new FileWriter(f));
            writer.write(queriesPane.getText());
            writer.close();
            logWork(LogLevel.INFO, "Queries was saved into: " + f.getAbsolutePath());
        } catch (IOException ex){
            logWork(LogLevel.ERROR, "Error while writing");
            
        }
    }
}//GEN-LAST:event_saveQueriesButtonMouseClicked

private void showResultsButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showResultsButtonMouseClicked
    
    previewFrame.pack();
    previewFrame.setVisible(true);
}//GEN-LAST:event_showResultsButtonMouseClicked

private void previewFrameComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_previewFrameComponentHidden
    this.setEnabled(true);
    previewFrame.setAlwaysOnTop(false);
}//GEN-LAST:event_previewFrameComponentHidden

private void previewFrameComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_previewFrameComponentShown
    this.setEnabled(false);
    previewFrame.setAlwaysOnTop(true);
}//GEN-LAST:event_previewFrameComponentShown

private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
    indexProgressBar.setValue(0);
    indexProgressBar.setMinimum(0);
    final IndexCallback handler = this;
    final File docPath = new File(docDirectoryField.getText());
    if (! docPath.exists() || ! docPath.isDirectory()) {
        logWork(LogLevel.ERROR, "Document path not exists or is directory");
        return;
    }
    docDirectoryField.setEnabled(false);
    jButton1.setEnabled(false);
    jButton2.setEnabled(false);
    jPanel1.setEnabled(false);
    
    SwingWorker backend = new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                Indexer indexer = new Indexer(handler);
                String index = docPath.getName()+"_index";
                        
                indexer.buildIndex(docPath.getAbsolutePath(), index);
                return null;
            }
            
            @Override
            protected void done(){
                handler.processingDone();
            }
    };
    backend.execute();
}//GEN-LAST:event_jButton2MouseClicked

    private void closePreviewButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closePreviewButtonMouseClicked
        previewFrame.setVisible(false);
    }//GEN-LAST:event_closePreviewButtonMouseClicked

    private void openJournalButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_openJournalButtonMouseClicked
        journalFrame.pack();
        journalFrame.setVisible(true);
    }//GEN-LAST:event_openJournalButtonMouseClicked

    private void closeJournalButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeJournalButtonMouseClicked
        journalFrame.setVisible(false);
    }//GEN-LAST:event_closeJournalButtonMouseClicked

    private void resultListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_resultListValueChanged
        int sel = evt.getFirstIndex();
        ObjectPair<String, String> selectedDoc = new ObjectPair<>(searchResultList.get(sel));
        
        docPathField.setText(selectedDoc.getFirst());
        HTMLDocument doc = (HTMLDocument) previewPane.getDocument();
        String style = "<style type=\"text/css\"> B{ background-color: #EAFF5E } </style>";
        String html = String.format("<html> <head> %s </head> <body> %s </body> </html>", style, selectedDoc.getSecond());
        try {
            doc.insertString(0, html, null);
        } catch (BadLocationException ex) {
            logWork(LogLevel.ERROR, "Something wrong happens");
        }
    }//GEN-LAST:event_resultListValueChanged


    
    private void searchButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchButtonMouseClicked
        searchProgressBar.setValue(0);
        searchProgressBar.setMinimum(0);
        final SearchCallback handler = this;
        final File docPath = new File(docDirectoryField.getText());
        
        if (! docPath.exists() || ! docPath.isDirectory())  {
            logWork(LogLevel.ERROR, "Document path not exists or is directory");
            return;
        }
        
        searchButton.setEnabled(false);
        showResultsButton.setEnabled(false);
        jPanel3.setEnabled(false);
        searchSummaryLabel.setText(null);

        final List<String> queries = Utils.processQueriesString(docDirectoryField.getText());
        
        SwingWorker backend = new SwingWorker<List<SearchResult>, Void>() {
                @Override
                protected List<SearchResult> doInBackground() throws Exception {
                    String index = docPath.getName()+"_index";
                    Searcher searcher = new Searcher(index, handler);
                   
                    return searcher.search(queries);
                }

                @Override
                protected void done(){
                    try {
                        handler.processingDone(this.get());
                    } catch (InterruptedException ex) {
                        handler.writeLog(LogLevel.ERROR, "Search thread was interrupted");
                    } catch (ExecutionException ex) {
                        handler.writeLog(LogLevel.ERROR, "Something wrong hapened in search thread");
                    }
                }
        };
                
        backend.execute();
    }//GEN-LAST:event_searchButtonMouseClicked

    private void processSearchResults(List<SearchResult> res) {
        searchButton.setEnabled(true);
        
        jPanel3.setEnabled(true);
        
       
        initSearchSummaryLabel(res);
        initPreviewFrame(res);
    }
    
    private void initSearchSummaryLabel(List<SearchResult> res){
        String summary = "";
        int total_fragments = 0;
        for (SearchResult s: res){
            for (List<ObjectPair<Integer, String>> l :  s.getDocumentsFragments().values() ){
                total_fragments += l.size();
            }
        }
        summary += String.format("Запросов: %d\n", total_fragments);
        int total_documents = 0;
        if (res.size() > 0 ){
            total_documents = res.get(0).getDocumentsText().size();
        }
        summary += String.format("Документов: %d\n", total_documents);
                
        searchSummaryLabel.setText(summary);
    }
    
    private void initPreviewFrame(List<SearchResult> res){
        if (res.size() > 0){
            showResultsButton.setEnabled(true);
            searchResultList = res.get(0).getDocumentsText();
            
            String[] names = new String[searchResultList.size()];
            for (int i = 0; i < searchResultList.size(); i++){
                names[i] = new File(searchResultList.get(0).getFirst()).getName();
            }
            resultList.setListData(names);
        }
        else{
            showResultsButton.setEnabled(false);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                final Search4uGUI app = new Search4uGUI();
                app.docDirectoryField.getDocument().addDocumentListener(new DocumentListener() {

                    @Override
                    public void insertUpdate(DocumentEvent arg0) {
                        try {
                            File docPath = new File(arg0.getDocument().getText(0, arg0.getDocument().getLength()));
                            app.jButton2.setEnabled(docPath.exists() && docPath.isDirectory());
                            app.logWork(LogLevel.DEBUG, "Doc path changed, valid: " + (docPath.exists() && docPath.isDirectory()));
                            //System.out.println("Doc path changed, valid: " + new Boolean(docPath.exists() && docPath.isDirectory()));
                        } catch (BadLocationException ex) {
                            ex.printStackTrace();
                        }
                    }

                    @Override
                    public void removeUpdate(DocumentEvent arg0) {
                        try {
                            File docPath = new File(arg0.getDocument().getText(0, arg0.getDocument().getLength()));
                            app.jButton2.setEnabled(docPath.exists() && docPath.isDirectory());
                            app.logWork(LogLevel.DEBUG, "Doc path changed, valid: " + (docPath.exists() && docPath.isDirectory()));
                            //System.out.println("Doc path changed, valid: " + new Boolean(docPath.exists() && docPath.isDirectory()));
                        } catch (BadLocationException ex) {
                            ex.printStackTrace();
                        }
                    }

                    @Override
                    public void changedUpdate(DocumentEvent arg0) {
                        try {
                            File docPath = new File(arg0.getDocument().getText(0, arg0.getDocument().getLength()));
                            app.jButton2.setEnabled(docPath.exists() && docPath.isDirectory());
                            
                            app.logWork(LogLevel.DEBUG, "Doc path changed, valid: " + (docPath.exists() && docPath.isDirectory()));
                            //System.out.println("Doc path changed, valid: " + new Boolean(docPath.exists() && docPath.isDirectory()));
                        } catch (BadLocationException ex) {
                            ex.printStackTrace();
                        }
                    }
                });
                app.setLocationByPlatform(true);
                app.setVisible(true);
            }
        });
    }
    private List<ObjectPair<String, String>> searchResultList;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JButton clearQueriesButton;
    private javax.swing.JButton closeJournalButton;
    private javax.swing.JButton closePreviewButton;
    private javax.swing.JTextField docDirectoryField;
    private javax.swing.JTextField docPathField;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JButton exportXLSXButton;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JProgressBar indexProgressBar;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JFrame journalFrame;
    private javax.swing.JTextPane journalPane;
    private javax.swing.JButton loadQueriesButton;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JButton openDestinationButton;
    private javax.swing.JButton openJournalButton;
    private javax.swing.JFrame previewFrame;
    private javax.swing.JTextPane previewPane;
    private javax.swing.JTextPane queriesPane;
    private javax.swing.JList resultList;
    private javax.swing.JButton saveQueriesButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JProgressBar searchProgressBar;
    private javax.swing.JLabel searchSummaryLabel;
    private javax.swing.JButton showResultsButton;
    // End of variables declaration//GEN-END:variables

    protected void logWork(LogLevel level, String message){
        HTMLDocument doc = (HTMLDocument) journalPane.getDocument();
        try { 
            doc.insertBeforeEnd(doc.getElement("body"), level.decorateHTML(message));
        } catch (BadLocationException ex) {
            
        } catch (IOException ex) {
            System.out.println("Exception");
        }
    }
    
    @Override
    public void writeLog(final LogLevel level, final String message) {
        EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                logWork(level, message);
            }
        });
        //System.out.println(error);
    }

    @Override
    public void setTotalDocumentsNumber(final int number) {
        EventQueue.invokeLater(new Runnable(){
            @Override
            public void run() {
                logWork(LogLevel.INFO, "Document number for indexing: " + number);
                indexProgressBar.setMaximum(number);
            }
        });
    }

    @Override
    public void setProcessedDocumentsNumber(final int number) {
        EventQueue.invokeLater(new Runnable(){
            @Override
            public void run() {
                indexProgressBar.setValue(number);
            }
        });
    }

    @Override
    public void processingDone() {
        EventQueue.invokeLater(new Runnable(){
            @Override
            public void run() {
                logWork(LogLevel.INFO, "Indexing done! ");
                docDirectoryField.setEnabled(true);
                jButton1.setEnabled(true);
                jButton2.setEnabled(true);
                jPanel1.setEnabled(true);
            }
        });
    }

    @Override
    public void setTotalProgress(final int number) {
        EventQueue.invokeLater(new Runnable(){

            @Override
            public void run() {
                logWork(LogLevel.INFO, "Total amount of work in search" + number);
                searchProgressBar.setMaximum(number);
            }
            
        });
        
        
    }

    @Override
    public void setCurrentProgress(final int number) {
        EventQueue.invokeLater(new Runnable(){
            
            @Override
            public void run() {   
                searchProgressBar.setValue(number);
            }
        });
    }

    @Override
    public void processingDone(final List<SearchResult> res) {
        EventQueue.invokeLater(new Runnable(){

            @Override
            public void run() {
                logWork(LogLevel.INFO, "Searching done!");
                processSearchResults(res);
            }   
        });
    }
}
